// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Alo7HomeworkSDK
import AVFoundation
@_exported import Alo7HomeworkSDK
import Foundation
import RxCocoa
import RxSwift
import Swift
import UIKit
import WebViewJavascriptBridge
extension AVAudioPlayer : RxCocoa.HasDelegate {
  public typealias Delegate = AVFoundation.AVAudioPlayerDelegate
}
public typealias FailHandler = (Swift.Error?) -> Swift.Void
public typealias SuccessHandler = () -> Swift.Void
public typealias StateHandler = (Alo7HomeworkSDK.Alo7HomeworkResultState) -> Swift.Void
public enum Alo7HomeworkResultState {
  case close(data: [Swift.String : Any?]?)
}
public struct Alo7HomeworkConfig {
  public static var `default`: Alo7HomeworkSDK.Alo7HomeworkConfig
}
public enum Alo7HomeworkError : Swift.Error {
  case nonHTTPResponse(Foundation.URLResponse)
  case failGetURL
  case fail(code: Swift.String, message: Swift.String)
  case jsonSerializationError
  case serverUnkown
  case unknown
}
public func start(with: Any?)
public func assignHomework(token: Swift.String, thirdPartyClazzIds: [Swift.String]? = nil, from: UIKit.UIViewController, success: Alo7HomeworkSDK.SuccessHandler?, fail: Alo7HomeworkSDK.FailHandler?, stateHandler: Alo7HomeworkSDK.StateHandler? = nil)
public func checkHomework(_ homeworkId: Swift.String, token: Swift.String, from: UIKit.UIViewController, config: Alo7HomeworkSDK.Alo7HomeworkConfig? = nil, success: Alo7HomeworkSDK.SuccessHandler?, fail: Alo7HomeworkSDK.FailHandler?, stateHandler: Alo7HomeworkSDK.StateHandler? = nil)
public func showHomework(_ homeworkId: Swift.String, token: Swift.String, from: UIKit.UIViewController, config: Alo7HomeworkSDK.Alo7HomeworkConfig? = nil, success: Alo7HomeworkSDK.SuccessHandler?, fail: Alo7HomeworkSDK.FailHandler?, stateHandler: Alo7HomeworkSDK.StateHandler? = nil)
@objc @_hasMissingDesignatedInitializers public class Alo7HomeworkViewController : UIKit.UIViewController {
  public var urlString: Swift.String? {
    get
    set
  }
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension Alo7HomeworkViewController : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension AVAudioRecorder : RxCocoa.HasDelegate {
  public typealias Delegate = AVFoundation.AVAudioRecorderDelegate
}
